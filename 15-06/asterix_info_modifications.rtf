{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww25400\viewh13220\viewkind0
\deftab720
\pard\pardeftab720\sl400

\f0\b\fs30 \cf0 \expnd0\expndtw0\kerning0
Hyracks
\b0 \expnd0\expndtw0\kerning0
 
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\b\fs30 \cf0 \expnd0\expndtw0\kerning0
1) yingyi
\b0 \expnd0\expndtw0\kerning0
 : Can you create an AbstractUnnestNonMapOperator as a parent class for these two?
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\b\fs30 \expnd0\expndtw0\kerning0
jules
\b0 \expnd0\expndtw0\kerning0
 : sure. 
\b \expnd0\expndtw0\kerning0
Already done
\f1\b0\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\b\fs30 \cf0 \expnd0\expndtw0\kerning0
2) yingyi
\b0 \expnd0\expndtw0\kerning0
 : Also, more importantly, you should override the method
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
public IVariableTypeEnvironment computeOutputTypeEnvironment(ITypingContext ctx) throws AlgebricksException
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
here in a similar fashion to the implementation in LeftOuterJoinOperator.
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
Because the variables produced by operator is nullable. 
\b \expnd0\expndtw0\kerning0
Done
\b0 \expnd0\expndtw0\kerning0
\

\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\b\fs30 \expnd0\expndtw0\kerning0
b) jules: 
\b0 \expnd0\expndtw0\kerning0
Outer Unnest Type Environment :
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\fs30 \expnd0\expndtw0\kerning0
Implement type environment computation in a similar way to that of the left outer join operator. 
\b \expnd0\expndtw0\kerning0
DONE
\f1\b0\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\b\fs30 \cf0 \expnd0\expndtw0\kerning0
3) yingyi:
\b0 \expnd0\expndtw0\kerning0
 we need to implement all visitor\'92s.
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\b\fs30 \expnd0\expndtw0\kerning0
jules: 
\b0 \expnd0\expndtw0\kerning0
will do. 
\b \expnd0\expndtw0\kerning0
Already done
\f1\b0\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\b\fs30 \cf0 \expnd0\expndtw0\kerning0
AsterixDB :
\f1\b0\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\b\fs30 \cf0 \expnd0\expndtw0\kerning0
4) yingyi : 
\b0 \expnd0\expndtw0\kerning0
completely stick with the AQL type system at the SQL++ Asterix.
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\b\fs30 \expnd0\expndtw0\kerning0
jules : 
\b0 \expnd0\expndtw0\kerning0
i concur. 
\b \expnd0\expndtw0\kerning0
Done
\f1\b0\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\b\fs30 \cf0 \expnd0\expndtw0\kerning0
5) yingyi
\b0 \expnd0\expndtw0\kerning0
 : use dynamic dispatch in API Framework.
\f1\fs24 \expnd0\expndtw0\kerning0
\

\f0\b\fs30 \expnd0\expndtw0\kerning0
jules : 
\b0 \expnd0\expndtw0\kerning0
ok 
\b \expnd0\expndtw0\kerning0
Can\'92t do unless merge two modules
\f1\b0\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f0\b\fs30 \cf0 \expnd0\expndtw0\kerning0
6) yingyi 
\b0 \expnd0\expndtw0\kerning0
: add optimizer tests
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f0\b\fs30 \cf0 \expnd0\expndtw0\kerning0
jules : 
\b0 \expnd0\expndtw0\kerning0
ok, but focus on left outer join.}
{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red0\green0\blue0;}
\margl1440\margr1440\vieww15480\viewh8880\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs24 \cf2 \expnd0\expndtw0\kerning0
Abstract
\b0 \expnd0\expndtw0\kerning0
\
Poor performance in database applications occurs even today because of inefficient database access, often involving a large number of queries performing similar work and returning small results. In those situations, round-trip delays add up quickly and database optimization strategies (such as efficient join algorithms) aren\'92t available. Traditionally, rewrite of queries and programs are done independently, by the database query compiler and the application program compiler respectively; thus these problems cannot be solved by either compiler alone. Holistic optimization attempts to solve this problem by making the application program compiler aware of database access and offer rewrite strategies that yield more efficient database queries.\
We survey the different approaches used to tackle the problem. A first category of approaches analyzes database interactions of the application program using static analysis, then use the results of the analysis to rewrite the program and improve data access patterns. We present a second approach using FORWARD, a data integration middleware running on the application server in which a single semi-structured query is used to declaratively specify the entire data access of an application report. We compare and contrast these different approaches, and as future work show how combining static analysis and FORWARD could yield optimization opportunities unavailable before.\cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720
\cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \
\
}
distribute result [%0->$$9]
-- DISTRIBUTE_RESULT  |PARTITIONED|
  exchange 
  -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
    project ([$$9])
    -- STREAM_PROJECT  |PARTITIONED|
      assign [$$9] <- [function-call: asterix:closed-record-constructor, Args:[AString: {nation_key}, %0->$$51, AString: {nation_name}, %0->$$52, AString: {aggregates}, %0->$$34]]
      -- ASSIGN  |PARTITIONED|
        project ([$$51, $$34, $$52])
        -- STREAM_PROJECT  |PARTITIONED|
          exchange 
          -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
            group by ([$$40 := %0->$$57]) decor ([$$51 := %0->$$57; $$52 := %0->$$54]) {
                      aggregate [$$34] <- [function-call: asterix:listify, Args:[function-call: asterix:closed-record-constructor, Args:[AString: {order_year}, %0->$$49, AString: {list_price}, %0->$$50]]]
                      -- AGGREGATE  |LOCAL|
                        limit AInt32: {3}
                        -- STREAM_LIMIT  |LOCAL|
                          order (DESC, %0->$$48) 
                          -- IN_MEMORY_STABLE_SORT [$$48(DESC)]  |LOCAL|
                            assign [$$50, $$49, $$48] <- [function-call: asterix:field-access-by-index, Args:[%0->$$7, AInt32: {1}], function-call: asterix:field-access-by-index, Args:[%0->$$7, AInt32: {0}], function-call: asterix:field-access-by-name, Args:[%0->$$7, AString: {price_per_year}]]
                            -- ASSIGN  |LOCAL|
                              unnest $$7 <- function-call: asterix:scan-collection, Args:[%0->$$29]
                              -- UNNEST  |LOCAL|
                                group by ([$$36 := %0->$$57]) decor ([%0->$$0]) {
                                          aggregate [$$29] <- [function-call: asterix:listify, Args:[function-call: asterix:closed-record-constructor, Args:[AString: {order_year}, %0->$$4, AString: {list_price}, %0->$$43]]]
                                          -- AGGREGATE  |LOCAL|
                                            group by ([$$4 := %0->$$59]) decor ([]) {
                                                      aggregate [$$43] <- [function-call: asterix:agg-sql-sum, Args:[%0->$$56]]
                                                      -- AGGREGATE  |LOCAL|
                                                        nested tuple source
                                                        -- NESTED_TUPLE_SOURCE  |LOCAL|
                                                   }
                                            -- MICRO_PRE_CLUSTERED_GROUP_BY[$$59]  |LOCAL|
                                              select (function-call: algebricks:not, Args:[function-call: asterix:is-system-null, Args:[%0->$$56]])
                                              -- STREAM_SELECT  |LOCAL|
                                                nested tuple source
                                                -- NESTED_TUPLE_SOURCE  |LOCAL|
                                       }
                                -- MICRO_PRE_CLUSTERED_GROUP_BY[$$57]  |LOCAL|
                                  order (ASC, %0->$$57) (ASC, %0->$$59) 
                                  -- IN_MEMORY_STABLE_SORT [$$57(ASC), $$59(ASC)]  |LOCAL|
                                    select (function-call: algebricks:not, Args:[function-call: asterix:is-system-null, Args:[%0->$$56]])
                                    -- STREAM_SELECT  |LOCAL|
                                      nested tuple source
                                      -- NESTED_TUPLE_SOURCE  |LOCAL|
                   }
            -- PRE_CLUSTERED_GROUP_BY[$$57]  |PARTITIONED|
              exchange 
              -- HASH_PARTITION_MERGE_EXCHANGE MERGE:[$$57(ASC), $$57(ASC), $$59(ASC)] HASH:[$$57]  |PARTITIONED|
                project ([$$0, $$54, $$59, $$57, $$56])
                -- STREAM_PROJECT  |PARTITIONED|
                  exchange 
                  -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                    group by ([$$57 := %0->$$45; $$58 := %0->$$45; $$59 := %0->$$35]) decor ([%0->$$0; %0->$$54]) {
                              aggregate [$$56] <- [function-call: asterix:agg-local-sql-sum, Args:[%0->$$27]]
                              -- AGGREGATE  |LOCAL|
                                select (function-call: algebricks:and, Args:[function-call: algebricks:not, Args:[function-call: algebricks:is-null, Args:[%0->$$39]], function-call: algebricks:not, Args:[function-call: algebricks:is-null, Args:[%0->$$44]]])
                                -- STREAM_SELECT  |LOCAL|
                                  nested tuple source
                                  -- NESTED_TUPLE_SOURCE  |LOCAL|
                           }
                    -- PRE_CLUSTERED_GROUP_BY[$$45, $$45, $$35]  |PARTITIONED|
                      exchange 
                      -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                        order (ASC, %0->$$45) (ASC, %0->$$45) (ASC, %0->$$35) 
                        -- STABLE_SORT [$$45(ASC), $$45(ASC), $$35(ASC)]  |PARTITIONED|
                          exchange 
                          -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                            project ([$$0, $$35, $$54, $$39, $$27, $$44, $$45])
                            -- STREAM_PROJECT  |PARTITIONED|
                              exchange 
                              -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                                left outer join (function-call: algebricks:eq, Args:[%0->$$41, %0->$$45])
                                -- HYBRID_HASH_JOIN [$$45][$$41]  |PARTITIONED|
                                  exchange 
                                  -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                                    assign [$$54] <- [function-call: asterix:field-access-by-index, Args:[%0->$$0, AInt32: {1}]]
                                    -- ASSIGN  |PARTITIONED|
                                      exchange 
                                      -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                                        data-scan []<-[$$45, $$0] <- GlobalMarketplace:Nations
                                        -- DATASOURCE_SCAN  |PARTITIONED|
                                          exchange 
                                          -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                                            empty-tuple-source
                                            -- EMPTY_TUPLE_SOURCE  |PARTITIONED|
                                  exchange 
                                  -- HASH_PARTITION_EXCHANGE [$$41]  |PARTITIONED|
                                    assign [$$44, $$39] <- [TRUE, TRUE]
                                    -- ASSIGN  |PARTITIONED|
                                      project ([$$35, $$27, $$41])
                                      -- STREAM_PROJECT  |PARTITIONED|
                                        exchange 
                                        -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                                          join (function-call: algebricks:eq, Args:[%0->$$46, %0->$$38])
                                          -- HYBRID_HASH_JOIN [$$46][$$38]  |PARTITIONED|
                                            exchange 
                                            -- HASH_PARTITION_EXCHANGE [$$46]  |PARTITIONED|
                                              project ([$$35, $$27, $$46])
                                              -- STREAM_PROJECT  |PARTITIONED|
                                                assign [$$27, $$35, $$46] <- [function-call: asterix:field-access-by-index, Args:[%0->$$2, AInt32: {3}], function-call: asterix:field-access-by-index, Args:[%0->$$2, AInt32: {2}], function-call: asterix:field-access-by-index, Args:[%0->$$2, AInt32: {1}]]
                                                -- ASSIGN  |PARTITIONED|
                                                  project ([$$2])
                                                  -- STREAM_PROJECT  |PARTITIONED|
                                                    exchange 
                                                    -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                                                      data-scan []<-[$$37, $$2] <- GlobalMarketplace:Orders
                                                      -- DATASOURCE_SCAN  |PARTITIONED|
                                                        exchange 
                                                        -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                                                          empty-tuple-source
                                                          -- EMPTY_TUPLE_SOURCE  |PARTITIONED|
                                            exchange 
                                            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                                              project ([$$38, $$41])
                                              -- STREAM_PROJECT  |PARTITIONED|
                                                assign [$$41] <- [function-call: asterix:field-access-by-index, Args:[%0->$$3, AInt32: {1}]]
                                                -- ASSIGN  |PARTITIONED|
                                                  exchange 
                                                  -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                                                    data-scan []<-[$$38, $$3] <- GlobalMarketplace:Customers
                                                    -- DATASOURCE_SCAN  |PARTITIONED|
                                                      exchange 
                                                      -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                                                        empty-tuple-source
                                                        -- EMPTY_TUPLE_SOURCE  |PARTITIONED|